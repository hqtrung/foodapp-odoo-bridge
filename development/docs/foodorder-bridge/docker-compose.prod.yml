# Docker Compose for FoodOrder Bridge API - Production Deployment
version: '3.8'

services:
  # Main API service
  foodorder-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: foodorder-bridge-api-prod
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - HOST=0.0.0.0
      - PORT=8000
      - LOG_LEVEL=INFO
      - LOG_FORMAT=json
    env_file:
      - .env
    volumes:
      # Persistent cache directory
      - foodorder_cache:/app/cache
      # Persistent images directory
      - foodorder_images:/app/public
    restart: always
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - foodorder-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis for enhanced caching
  redis:
    image: redis:7-alpine
    container_name: foodorder-redis-prod
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    restart: always
    networks:
      - foodorder-network
    sysctls:
      - net.core.somaxconn=65535
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx reverse proxy with SSL termination
  nginx:
    image: nginx:alpine
    container_name: foodorder-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deploy/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deploy/ssl:/etc/nginx/ssl:ro
      - foodorder_images:/var/www/html/static:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - foodorder-api
    restart: always
    networks:
      - foodorder-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Prometheus for monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: foodorder-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./deploy/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - foodorder-network

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: foodorder-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
    restart: unless-stopped
    networks:
      - foodorder-network

networks:
  foodorder-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: foodorder-br

volumes:
  foodorder_cache:
    driver: local
  foodorder_images:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local